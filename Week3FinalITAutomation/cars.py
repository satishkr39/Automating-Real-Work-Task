#!/usr/bin/env python3

import json
import locale
import sys
from Week3FinalITAutomation import report, emails





def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0, "car_model": ""}
  pop_car_yr = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
      print(max_revenue)
    # TODO: also handle max sales
    sales = item["total_sales"]
    if sales > max_sales["total_sales"]:
      max_sales["total_sales"] = item["total_sales"]
      max_sales["car_model"] = item["car"]["car_model"]
      print(max_sales)
    # TODO: also handle most popular car_year
    pop_car_yr[item["car"]["car_year"]] = pop_car_yr.get(item["car"]["car_year"], 0) + item["total_sales"]
    pop_car_yr_sorted = sorted(pop_car_yr.items(), key=lambda a: a[1], reverse=True)
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]), "The car having most sales {} and model {}".format(max_sales["total_sales"],
                                                                                                                  max_sales["car_model"]),
    "The most popular year was {} with {} sales.".format(pop_car_yr_sorted[0][0], pop_car_yr_sorted[0][1]),
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main():
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  car_data = cars_dict_to_table(data)

  # TODO: turn this into a PDF report
  report.generate("cars.pdf", "Sales summary for last month", "<br/>".join(summary), car_data)
  # TODO: send the PDF report as an email attachment
  message = emails.generate("automation@example.com","user@example.com","Sales summary for last month", body=summary, attachment_path="cars.pdf")
  emails.send(message)
if __name__ == "__main__":
  main()
